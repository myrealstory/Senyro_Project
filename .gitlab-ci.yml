stages:
  # - Build
  # - Scan
  - PushECR
  - DeployEKS

.docker-build-to-ecr-template: &docker-build-to-ecr
  - echo $BUILD_ENV
  - echo $NODE_ENV
  - aws --version
  - docker --version
  - mkdir -p ./.ssh
  - echo "$SSH_PRIVATE_KEY" > ./.ssh/id_rsa
  - chmod 600 ./.ssh/id_rsa
  - aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ACCOUNTID}.dkr.ecr.ap-east-1.amazonaws.com
  - docker build --build-arg BUILD_ENV=$BUILD_ENV --build-arg NODE_ENV=$NODE_ENV -t ${DOCKER_BUILD_TAG} . 
  - docker tag ${DOCKER_BUILD_TAG}:latest ${AWS_ACCOUNTID}.dkr.ecr.ap-east-1.amazonaws.com/${SERVICE_NAME}:${CI_COMMIT_TAG}
  - docker push ${AWS_ACCOUNTID}.dkr.ecr.ap-east-1.amazonaws.com/${SERVICE_NAME}:${CI_COMMIT_TAG}

.deploy-to-eks-template: &deploy-to-eks
  - apk add --no-cache openssh-client 
  - mkdir -p ~/.ssh 
  - eval $(ssh-agent -s) 
  - echo "$SSH_PRIVATE_KEY" | ssh-add - 
  - ssh-keyscan gitlab.hk >> ~/.ssh/known_hosts 
  - git clone -b ${BRANCH} git@gitlab.hk:maxims-hk/senryo-hk/online-ordering-systems-revamp2023/deployment/service_yaml.git
  - aws eks update-kubeconfig --name ${CLUSTER_NAME} --region ${AWS_DEFAULT_REGION}
  - cd service_yaml
  - sed -i "s/:version/:${CI_COMMIT_TAG}/" ./${SERVICE_NAME}.yaml
  - kubectl apply -f ${SERVICE_NAME}.yaml -n blue
  - kubectl rollout status deployment/${SERVICE_NAME} -n blue --timeout=5m

# Build-source-code:
#   stage: Build
#   tags:
#     - SR-Docker
#   image:
#     name: node:lts
#     entrypoint: [""]
#   before_script:
#     - node -v
#   script:
#     - mkdir -p ~/.ssh
#     - echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
#     - chmod 600 ~/.ssh/id_rsa
#     - npm install
#     - npm run build

# sonarqube:
#   stage: Scan
#   tags:
#     - SR-Docker
#   image:
#     name: sonarsource/sonar-scanner-cli:latest
#     entrypoint: [""]
#   variables:
#     SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
#     GIT_DEPTH: "0"
#   script:
#     - sonar-scanner -X -Dsonar.sources=. -Dsonar.host.url=$SONAR_HOST_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.password=$SONAR_PASSWORD -Dsonar.projectKey=$SERVICE_NAME
#   only:
#     - master
#     - uat
#     - dev


Build-image-to-ecr:
  stage: PushECR
  image:
    name: docker:stable
  services:
  - name: docker:dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
    # AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    # AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    # AWS_ACCOUNTID: $DEV_AWS_ACCOUNTID
    # BUILD_ENV: "dev"
    NODE_ENV: "development"
  rules:
  - if: $CI_COMMIT_TAG =~ /^v[\d.]*\w*_dev$/
    variables:
      AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
      AWS_ACCOUNTID: $DEV_AWS_ACCOUNTID
      BUILD_ENV: "dev"
      NODE_ENV: "production"
      DOCKER_BUILD_TAG: "dev-ordering-site-service"
  - if: $CI_COMMIT_TAG =~ /^v[\d.]*_uat$/
    variables:
      AWS_ACCESS_KEY_ID: $UAT_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $UAT_AWS_SECRET_ACCESS_KEY
      AWS_ACCOUNTID: $UAT_AWS_ACCOUNTID
      BUILD_ENV: "uat"
      NODE_ENV: "production"
      DOCKER_BUILD_TAG: "uat-ordering-site-service"
  - if: $CI_COMMIT_TAG =~ /^v[\d.]*_sit$/
    variables:
      AWS_ACCESS_KEY_ID: $SIT_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $SIT_AWS_SECRET_ACCESS_KEY
      AWS_ACCOUNTID: $SIT_AWS_ACCOUNTID
      BUILD_ENV: "sit"
      NODE_ENV: "production"
      DOCKER_BUILD_TAG: "sit-ordering-site-service"
  - if: $CI_COMMIT_TAG =~ /^v(\d+\.){2}\d+$/
    variables:
      AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY
      AWS_ACCOUNTID: $PROD_AWS_ACCOUNTID
      BUILD_ENV: "production"
      NODE_ENV: "production"
      DOCKER_BUILD_TAG: "prod-ordering-site-service"
    when: manual
  tags:
    - SR-Docker
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip3 install --no-cache-dir awscli
    - apk add --update nodejs nodejs-npm
  script:
    - *docker-build-to-ecr

Deploy-services-to-eks:
  stage: DeployEKS
  image: alpine/k8s:1.27.3
  variables:
    AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
    CLUSTER_NAME: $DEV_CLUSTER_NAME
    BRANCH: "dev"
  rules:
  - if: $CI_COMMIT_TAG =~ /^v[\d.]*\w*_dev$/
    variables:
      AWS_ACCESS_KEY_ID: $DEV_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $DEV_AWS_SECRET_ACCESS_KEY
      CLUSTER_NAME: $DEV_CLUSTER_NAME
      BRANCH: "dev"
  - if: $CI_COMMIT_TAG =~ /^v[\d.]*_uat$/
    variables:
      AWS_ACCESS_KEY_ID: $UAT_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $UAT_AWS_SECRET_ACCESS_KEY
      CLUSTER_NAME: $UAT_CLUSTER_NAME
      BRANCH: "uat"
  - if: $CI_COMMIT_TAG =~ /^v[\d.]*_sit$/
    variables:
      AWS_ACCESS_KEY_ID: $SIT_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $SIT_AWS_SECRET_ACCESS_KEY
      CLUSTER_NAME: $SIT_CLUSTER_NAME
      BRANCH: "sit"
  - if: $CI_COMMIT_TAG =~ /^v(\d+\.){2}\d+$/
    variables:
      AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
      AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY
      CLUSTER_NAME: $PROD_CLUSTER_NAME
      BRANCH: "master"
    when: manual
  tags:
    - SR-Docker
  script:
    - *deploy-to-eks

# PROD-Build-image-to-ecr:
#   stage: PushECR
#   image:
#     name: docker:stable
#   services:
#   - name: docker:dind
#   variables:
#     DOCKER_TLS_CERTDIR: "/certs"
#     AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
#     AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY
#     AWS_ACCOUNTID: $PROD_AWS_ACCOUNTID
#     BUILD_ENV: "production"
#     NODE_ENV: "production"
#   tags:
#     - SR-Docker
#   before_script:
#     - apk add --no-cache python3 py3-pip
#     - pip3 install --no-cache-dir awscli
#     - apk add --update nodejs nodejs-npm
#   script:
#     - *docker-build-to-ecr
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^v(\d+\.){2}\d+$/
#   when: manual

# PROD-Deploy-services-to-eks:
#   stage: DeployEKS
#   image: alpine/k8s:1.27.3
#   variables:
#     AWS_ACCESS_KEY_ID: $PROD_AWS_ACCESS_KEY_ID
#     AWS_SECRET_ACCESS_KEY: $PROD_AWS_SECRET_ACCESS_KEY
#     CLUSTER_NAME: $PROD_CLUSTER_NAME
#     BRANCH: "master"
#     SSH_PRIVATE_KEY: ${SSH_PRIVATE_KEY}
#   tags:
#     - SR-Docker
#   script:
#     - *deploy-to-eks
#   rules:
#     - if: $CI_COMMIT_TAG =~ /^v(\d+\.){2}\d+$/
#   when: manual
